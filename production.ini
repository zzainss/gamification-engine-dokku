###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/environment.html
###

[app:main]
use = egg:gamification-engine

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_tm

sqlalchemy.url = postgres://preqipfifkgeqz:cbd4a5131cdd459692300071a1ce72321d803b7568cac1ce743cb7f390033d97@ec2-107-22-167-179.compute-1.amazonaws.com:5432/d5b9nes4cucko7

#reverse proxy settings
force_https = false
urlprefix =

#flaskadmin settings
flaskadmin_secret = 87ghsjkdjfhg85grsfgsdfghwez89hsuif # replace with random string!

# dogpile cache
dogpile_cache.backend = dogpile.cache.null

dogpile_cache.general.backend = dogpile.cache.dbm
dogpile_cache.general.arguments.filename = general.dbm

dogpile_cache.achievement_eval.backend = dogpile.cache.dbm
dogpile_cache.achievement_eval.arguments.filename = achievement_eval.dbm

dogpile_cache.achievements_by_user_for_today.backend = dogpile.cache.dbm
dogpile_cache.achievements_by_user_for_today.arguments.filename = achievements_by_user_for_today.dbm

dogpile_cache.translations.backend = dogpile.cache.dbm
dogpile_cache.translations.arguments.filename = translations.dbm

dogpile_cache.achievements_users_levels.backend = dogpile.cache.dbm
dogpile_cache.achievements_users_levels.arguments.filename = achievements_users_levels.dbm

dogpile_cache.goal_evaluation.backend = dogpile.cache.dbm
dogpile_cache.goal_evaluation.arguments.filename = goal_evaluation.dbm

dogpile_cache.goal_statements.backend = dogpile.cache.memory

# memcache
urlcache_url = 127.0.0.1:11211
urlcache_active = true

# callback url, will be used for time-related leaderboard evaluations (daily,monthly,yearly) (TBD) 
notify_progress =

###
# wsgi server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543

[alembic]
# path to migration scripts
script_location = gengine:app/alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# max length of characters to apply to the
# "slug" field
#truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; this defaults
# to alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar %(here)s/bat alembic/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = postgres://preqipfifkgeqz:cbd4a5131cdd459692300071a1ce72321d803b7568cac1ce743cb7f390033d97@ec2-107-22-167-179.compute-1.amazonaws.com:5432/d5b9nes4cucko7

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/logging.html
###

[loggers]
keys = root, gengine, sqlalchemy, alembic, sentry

[handlers]
keys = console, sentry

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console, sentry

[logger_gengine]
level = WARN
handlers =
qualname = gengine

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_sentry]
level = WARN
handlers = console
qualname = sentry.errors
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_sentry]
class = raven.handlers.logging.SentryHandler
args = ()
level = WARNING
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
